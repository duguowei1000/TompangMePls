// export default affects the syntax when importing the exported "thing", when allowing to import, whatever has been exported, by choosing the name in the import itself, no matter what was the name when it was exported, simply because it's marked as the "default".

// A useful use case, which I like (and use), is allowing to export an anonymous function without explicitly having to name it, and only when that function is imported, it must be given a name:

// Example:
// Export 2 functions, one is default:
// export function divide( x ){
//     return x / 2;
// }

// // only one 'default' function may be exported and the rest (above) must be named
// export default function( x ){  // <---- declared as a default function
//     return x * x;
// }
// Import the above functions. Making up a name for the default one:
// // The default function should be the first to import (and named whatever)
// import square, {divide} from './module_1.js'; // I named the default "square" 

// console.log( square(2), divide(2) ); // 4, 1
// When the {} syntax is used to import a function (or variable) it means that whatever is imported was already named when exported, so one must import it by the exact same name, or else the import wouldn't work.


/////////////////////toggle menu
// // Set of user identifiers that have notifications enabled.
// const notifications = new Set<number>();

// function toggleNotifications(id: number) {
//   if (!notifications.delete(id)) notifications.add(id);
// }

// const toggle = new Menu("toggle")
//   .text(
//     (ctx) => ctx.from && notifications.has(ctx.from.id) ? "ðŸ””" : "ðŸ”•",
//     (ctx) => {
//         console.log("ctxfrom",ctx.from)
//         console.log("ctxfromid",ctx.from.id)
//       toggleNotifications(ctx.from.id);
//       ctx.menu.update(); // update the menu!
//     },
//   );

// bot.use(toggle)
// bot.command("toggle", async (ctx) => {
//     await ctx.reply(startText(), { reply_markup: toggle, parse_mode: "HTML" });
// });


///Keyboard
    //   reply_markup: {
    //     one_time_keyboard: true,
    //     keyboard: new Keyboard()
    //       .text("Jan").text("Feb").text("Mar").row()
    //       .text("Apr").text("May").text("Jun").row()
    //       .text("Jul").text("Aug").text("Sep").row()
    //       .text("Oct").text("Nov").text("Dec").build(),
    //   },
    // });
  //});


//   db.testing.findOne(  
//     { _id: "id1", "array.active" : 1 },
//     { "array.$": 1 }
// );
// There is still a restriction which might or might not be problematic for your use-case: The $-operator only returns the first entry of each array per document. You are using findOne so I assume your intention is to get only one array entry anyway. But this restriction might bite you in the future.

// When you want to get all the array entries, you will have to use an aggregation pipeline with 3 steps.

// filter the document(s) you need results from with $match
// unwind the arrays to streams of individual documents with $unwind
// filter that resulting document-stream again by the condition which applies to array attributes with another $match
// (optional) reduce the documents to only those fields you want with $project